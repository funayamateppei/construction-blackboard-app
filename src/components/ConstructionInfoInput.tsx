/**
 * Â∑•‰∫ãÊÉÖÂ†±ÂÖ•Âäõ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
 * @fileoverview Â∑•‰∫ãÂêç„Å®ÂãïÁöÑ„Éï„Ç£„Éº„É´„Éâ„ÇíÁµ±Âêà„Åó„ÅüÂÖ•Âäõ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
 */

import {memo, useState, useCallback} from "react"
import {MUI, MuiIcons} from "../ui"
import type {DynamicField} from "../types"
import {isDuplicateKey} from "../utils/helpers"

/**
 * Â∑•‰∫ãÊÉÖÂ†±ÂÖ•Âäõ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆ„Éó„É≠„Éë„ÉÜ„Ç£
 */
interface ConstructionInfoInputProps {
  /** Â∑•‰∫ãÂêç */
  constructionName: string
  /** Â∑•‰∫ãÂêçÂ§âÊõ¥ÊôÇ„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØÈñ¢Êï∞ */
  onConstructionNameChange: (name: string) => void
  /** ÂãïÁöÑ„Éï„Ç£„Éº„É´„Éâ„ÅÆÈÖçÂàó */
  dynamicFields: DynamicField[]
  /** „Éï„Ç£„Éº„É´„ÉâËøΩÂä†ÊôÇ„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØÈñ¢Êï∞ */
  onAddField: (key: string, value: string) => void
  /** „Éï„Ç£„Éº„É´„ÉâÊõ¥Êñ∞ÊôÇ„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØÈñ¢Êï∞ */
  onUpdateField: (id: string, key: string, value: string) => void
  /** „Éï„Ç£„Éº„É´„ÉâÂâäÈô§ÊôÇ„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØÈñ¢Êï∞ */
  onRemoveField: (id: string) => void
}

/**
 * Â∑•‰∫ãÊÉÖÂ†±ÂÖ•Âäõ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
 */
export const ConstructionInfoInput = memo(
  ({
    constructionName,
    onConstructionNameChange,
    dynamicFields,
    onAddField,
    onUpdateField,
    onRemoveField,
  }: ConstructionInfoInputProps) => {
    const [showAddForm, setShowAddForm] = useState(false)
    const [newKey, setNewKey] = useState("")
    const [newValue, setNewValue] = useState("")
    const [error, setError] = useState<string | null>(null)

    /**
     * Êñ∞„Åó„ÅÑ„Éï„Ç£„Éº„É´„Éâ„ÇíËøΩÂä†„Åô„Çã
     */
    const handleAddField = useCallback(() => {
      // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥
      if (!newKey.trim()) {
        setError("È†ÖÁõÆÂêç„ÅØÂøÖÈ†à„Åß„Åô")
        return
      }

      if (!newValue.trim()) {
        setError("È†ÖÁõÆ„ÅÆÂÄ§„ÅØÂøÖÈ†à„Åß„Åô")
        return
      }

      if (isDuplicateKey(dynamicFields, newKey)) {
        setError("„Åì„ÅÆÈ†ÖÁõÆÂêç„ÅØÊó¢„Å´Â≠òÂú®„Åó„Åæ„Åô")
        return
      }

      // „Éï„Ç£„Éº„É´„Éâ„ÇíËøΩÂä†
      onAddField(newKey.trim(), newValue.trim())

      // „Éï„Ç©„Éº„É†„Çí„É™„Çª„ÉÉ„Éà
      setNewKey("")
      setNewValue("")
      setError(null)
      setShowAddForm(false)
    }, [newKey, newValue, dynamicFields, onAddField])

    /**
     * ËøΩÂä†„Éï„Ç©„Éº„É†„Çí„Ç≠„É£„É≥„Çª„É´
     */
    const handleCancel = useCallback(() => {
      setNewKey("")
      setNewValue("")
      setError(null)
      setShowAddForm(false)
    }, [])

    return (
      <MUI.Paper elevation={2} sx={{p: 3, mb: 2}}>
        <MUI.Stack spacing={2}>
          {/* Â∑•‰∫ãÂêçÂÖ•Âäõ */}
          <MUI.TextField
            fullWidth
            required
            label="üèóÔ∏è Â∑•‰∫ãÂêç"
            value={constructionName}
            onChange={(e) => onConstructionNameChange(e.target.value)}
            placeholder="Â∑•‰∫ãÂêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàÂøÖÈ†àÔºâ"
            variant="outlined"
            InputProps={{
              startAdornment: (
                <MUI.InputAdornment position="start">
                  <MuiIcons.Construction color="primary" />
                </MUI.InputAdornment>
              ),
            }}
          />

          {/* ÂãïÁöÑ„Éï„Ç£„Éº„É´„Éâ„É™„Çπ„Éà */}
          {dynamicFields.map((field) => (
            <MUI.Box key={field.id} sx={{ml: 2, pl: 2, borderLeft: "3px solid", borderColor: "primary.light"}}>
              <MUI.Stack direction="row" spacing={1} alignItems="center">
                <MUI.TextField
                  size="small"
                  value={field.key}
                  onChange={(e) => onUpdateField(field.id, e.target.value, field.value)}
                  placeholder="È†ÖÁõÆÂêç"
                  variant="outlined"
                  sx={{flex: 1}}
                />
                <MUI.Typography variant="body2" color="text.secondary">
                  :
                </MUI.Typography>
                <MUI.TextField
                  size="small"
                  value={field.value}
                  onChange={(e) => onUpdateField(field.id, field.key, e.target.value)}
                  placeholder="ÂÄ§"
                  variant="outlined"
                  sx={{flex: 1}}
                />
                <MUI.IconButton
                  onClick={() => onRemoveField(field.id)}
                  color="error"
                  size="small"
                  aria-label={`${field.key}„ÇíÂâäÈô§`}
                >
                  <MuiIcons.Close />
                </MUI.IconButton>
              </MUI.Stack>
            </MUI.Box>
          ))}

          {/* Êñ∞„Åó„ÅÑ„Éï„Ç£„Éº„É´„ÉâËøΩÂä†„Éï„Ç©„Éº„É† */}
          {showAddForm && (
            <MUI.Box sx={{ml: 2, pl: 2, borderLeft: "3px solid", borderColor: "success.main", bgcolor: "success.50"}}>
              <MUI.Stack spacing={1}>
                <MUI.Stack direction="row" spacing={1} alignItems="center">
                  <MUI.TextField
                    size="small"
                    value={newKey}
                    onChange={(e) => {
                      setNewKey(e.target.value)
                      setError(null)
                    }}
                    placeholder="È†ÖÁõÆÂêç (‰æã: ÊñΩÂ∑•ËÄÖ)"
                    variant="outlined"
                    sx={{flex: 1}}
                  />
                  <MUI.Typography variant="body2" color="text.secondary">
                    :
                  </MUI.Typography>
                  <MUI.TextField
                    size="small"
                    value={newValue}
                    onChange={(e) => {
                      setNewValue(e.target.value)
                      setError(null)
                    }}
                    placeholder="ÂÜÖÂÆπ (‰æã: Âª∫Ë®≠Â§™ÈÉé)"
                    variant="outlined"
                    sx={{flex: 1}}
                  />
                  <MUI.Stack direction="row" spacing={0.5}>
                    <MUI.IconButton
                      onClick={handleAddField}
                      disabled={!newKey.trim() || !newValue.trim()}
                      color="success"
                      size="small"
                    >
                      <MuiIcons.Check />
                    </MUI.IconButton>
                    <MUI.IconButton onClick={handleCancel} color="error" size="small">
                      <MuiIcons.Close />
                    </MUI.IconButton>
                  </MUI.Stack>
                </MUI.Stack>
                {error && (
                  <MUI.Alert severity="error" sx={{mt: 1}}>
                    {error}
                  </MUI.Alert>
                )}
              </MUI.Stack>
            </MUI.Box>
          )}

          {/* „Éó„É©„Çπ„Éú„Çø„É≥ */}
          {!showAddForm && (
            <MUI.Box sx={{textAlign: "center", mt: 1}}>
              <MUI.Button
                onClick={() => setShowAddForm(true)}
                variant="outlined"
                color="info"
                startIcon={<MuiIcons.Add />}
                sx={{borderRadius: 20}}
              >
                È†ÖÁõÆ„ÇíËøΩÂä†
              </MUI.Button>
            </MUI.Box>
          )}
        </MUI.Stack>
      </MUI.Paper>
    )
  },
)

ConstructionInfoInput.displayName = "ConstructionInfoInput"
